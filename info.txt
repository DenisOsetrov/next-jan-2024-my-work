1. Запуск проєкту: npm run dev - в консолі
   або
   налаштувати Run > Edit Configurations > + > npm > run, script - dev!
   - самостійно запустити  http://localhost:3000 у браузері (чи в терміналі)

2. Структура: Layout > Page!
3. У гілці - next-js-full-page - розміщена стартова сторінка з документацією і стилізацією.
   У мастері буде "почищена" шілка готова до роботи.

                                    Lesson 1
1. Створюємо директорії:
   - users
   - posts
   - comments

2. В кожній директорії створюємо компоненти:
   - UsersPage... назва можу відрізнятися

   при перевірці в браузері на url http://localhost:3000/comments отримаємо компонент
   отже, назва папки і є шлях до компонента (роута)

3. Для переходу між компонентами створимо окремий компонент MenuComponent в директорії - components в директорії src ():
   - для прикладу:
                 - побудуємо в users - layout (rlc -> Enter)
                 - в постах і коментарях - page.
                 - url прописуємо через '/'

4. Треба пам'ятати, що компоненти є:
   - серверні;
   - клієнтські;

5. Застосуємо в основному layout наш MenuComponent зі шлихами на компоненти.
6.  - арр - відповідає за маршрутизацію.
    - src - накопичує всі інші дані додатку.

7. Для того, щоб побудувати /users/... - в users -> папка -> page (чи layout).
8. Що стосується параметрів типу id - створюється директорія з [id],
   яка приймиє пропси і передає їх.
9. Для об'єднання компонентів у групу використовується ()  - прикл. (users),
   в яку вставляємо всі компоненти юзера.

10. Fetch! Зробимо запит fetch у пейджі юзерів.
11. Створимо папку - models в корінь проєкту.
    - Створимо ts файл types.d - файли - .d (dds) - доступні скрізь!
      Тому ці типи, інтерфейси можна робити в 1 файлі

12. Створимо services в src -> api.service.

13. Metadata: - є корисним для SEO та відображення у соціальних мережах
    - title - відображаються в браузері на вкладці сторінки. Може бути глобальний -
      в головному layout додатку, може бути  локальний - в компоненті!
    - description: знаходиться в <head> додатку.
    - обидва відображаються на сторінці html в head.

    - SEO-оптимізація (Search Engine Optimization) – це процес покращення видимості
    та позицій веб-сайту в органічних результатах пошукових систем за допомогою різних
    технік і стратегій, що включають оптимізацію контенту, структури сайту та зовнішніх
    посилань, з метою залучення більшої кількості цільових відвідувачів.

14. Динамічне відображення метадати на UserLayout!
    - створимо const generateMetadata в users/id/layout
    - створимо layout в users/id
    - створимо const generateMetadata - яка буде повертати динамічні метадату - ({user.email})

15. Побудуємо структуру, сервіси і динамічну метадату(id) для posts i comments.
